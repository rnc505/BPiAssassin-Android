package com.pankaj.assassins;


import android.app.Activity;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import org.opencv.android.CameraBridgeViewBase;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;
import org.opencv.objdetect.CascadeClassifier;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.WindowManager;

public class CollectFacesActivity extends Activity implements CvCameraViewListener2 {
    private static final String    TAG                 = "CollectFacesActivity";
  
  private String folderAbsolutePath;

  private Mat                    mRgba;
  private Mat                    mGray;

  Mat mBgr;
  Mat outputBgr;
  Mat displayedFrameBgra;
  
  int oldNumberOfFaces;
  int numberOfFacesCollected;
  int trainingOver;
  
  MugshotFiles myMugshot;

  private DetectionBasedTracker  mNativeDetector1 = new DetectionBasedTracker();


  private CameraBridgeViewBase   mOpenCvCameraView;

  private BaseLoaderCallback  mLoaderCallback = new BaseLoaderCallback(this) {
      @Override
      public void onManagerConnected(int status) {
          switch (status) {
              case LoaderCallbackInterface.SUCCESS:
              {
                  Log.i(TAG, "OpenCV loaded successfully");

                  // Load native library after(!) OpenCV initialization
                  System.loadLibrary("detection_based_tracker");
                  

                  mOpenCvCameraView.enableView();
              } break;
              default:
              {
                  super.onManagerConnected(status);
              } break;
          }
      }
  };

  public CollectFacesActivity() {

      Log.i(TAG, "Instantiated new " + this.getClass());
  }

  /** Called when the activity is first created. */
  @Override
  public void onCreate(Bundle savedInstanceState) {
      Log.i(TAG, "called onCreate");
      super.onCreate(savedInstanceState);
      getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

  
      setContentView(R.layout.collect_faces_layout);
      
      myMugshot = new MugshotFiles();
      Log.e(TAG, "INTENT 1");
      ///Get the intent that started this Activity and store all the data into the object
      Intent intent = getIntent();
      
      Log.e(TAG, "INTENT 2");
      
      if(intent == null) Log.e(TAG, "INTENT IS NULL");
      
      Log.e(TAG, "INTENT 3");
      
      myMugshot = new MugshotFiles();
      myMugshot.codeName = intent.getStringExtra("codeName");
      myMugshot.phoneNumber = intent.getStringExtra("phoneNumber");
      myMugshot.emailAddress = intent.getStringExtra("emailAddress");

      mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.fd_activity_surface_view);
      if(PankajUtils.findFrontFacingCamera() == -2) {
    	  mOpenCvCameraView.setCameraIndex(0);  
      }
      else {
    	  mOpenCvCameraView.setCameraIndex(PankajUtils.findFrontFacingCamera());
      }
      
      mOpenCvCameraView.setCvCameraViewListener(this);
  }

  @Override
  public void onPause()
  {
      super.onPause();
      if (mOpenCvCameraView != null)
          mOpenCvCameraView.disableView();
  }

  @Override
  public void onResume()
  {
      super.onResume();
      OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_3, this, mLoaderCallback);
  }

  public void onDestroy() {
      super.onDestroy();
      if(mOpenCvCameraView != null)
          mOpenCvCameraView.disableView();
  }

  public void onCameraViewStarted(int width, int height) {
      mGray = new Mat();
      mRgba = new Mat();
  	
  	//Have to call Mat functions (Constructor) this in an async part, and not on UI thread
      mBgr = new Mat();
      outputBgr = new Mat();
      displayedFrameBgra = new Mat();
      oldNumberOfFaces = 0;
      numberOfFacesCollected = 0;
      trainingOver = 0;
      //myMugshot = new MugshotFiles();
      Log.e(TAG, "calling initDetectors()");
      Log.e(TAG, "initDetectors() with "+PankajUtils.pathVariable);
      try{
    	  mNativeDetector1.reset();
          mNativeDetector1.initDetectors(PankajUtils.pathVariable);
      }
      catch(Exception e) {
    	  e.printStackTrace();
      }
  }

  public void onCameraViewStopped() {
      mGray.release();
      mRgba.release();
      
      mBgr.release();
      outputBgr.release();
      displayedFrameBgra.release();
  }

  public Mat onCameraFrame(CvCameraViewFrame inputFrame) {

      mRgba = inputFrame.rgba();
      mGray = inputFrame.rgba();
    //  mRgbaCopy = inputFrame.rgba();

      Log.d(TAG, "SEPARATOR1");
      Imgproc.cvtColor(mRgba, mBgr, Imgproc.COLOR_BGRA2BGR);
      Imgproc.cvtColor(mRgba, outputBgr, Imgproc.COLOR_BGRA2BGR);
      
    
     
 
      if (numberOfFacesCollected >= PankajUtils.MAX_FACES) {
    	  
    	  Log.e(TAG, "codeName, phoneNumber, email Address is: "+ myMugshot.codeName + myMugshot.phoneNumber + myMugshot.emailAddress);
      	  //FINISHED - Serialize the object and write it to a file in the external memory
    	  folderAbsolutePath = PankajUtils.mugShotToFile(myMugshot);
    	  
    	  //FINISHED - Start the Activity 
    	  Intent intent = new Intent(CollectFacesActivity.this, FileUpdateActivity.class);
    	  intent.putExtra("mugShotFolder", folderAbsolutePath);
  		  startActivity(intent);
      }
      else {
              numberOfFacesCollected = mNativeDetector1.collect(mBgr, outputBgr);
              
              if(numberOfFacesCollected > oldNumberOfFaces) {
            	 
            	  //FINISHED - save the mBGR into the Array in the object
            	  myMugshot.matToString(numberOfFacesCollected, mBgr);
            	  
            	  oldNumberOfFaces = numberOfFacesCollected;
              }
              
      }
     
      
      Imgproc.cvtColor(outputBgr, displayedFrameBgra, Imgproc.COLOR_BGR2BGRA);

      
      return displayedFrameBgra;
  }

}
